{"meta":{"title":"Andrews的个人博客","subtitle":"","description":"","author":"andrews yang","url":"https://newbeenoob.github.io","root":"/"},"pages":[{"title":"我的分类","date":"2019-12-05T11:13:52.000Z","updated":"2019-12-05T14:06:33.838Z","comments":true,"path":"categories/index.html","permalink":"https://newbeenoob.github.io/categories/index.html","excerpt":"","text":""},{"title":"我的标签","date":"2019-12-05T11:10:14.000Z","updated":"2019-12-05T14:08:12.843Z","comments":true,"path":"tags/index.html","permalink":"https://newbeenoob.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"漫谈python特性：生成器Yield的用法","slug":"我的第一条博客","date":"2019-12-05T14:44:06.000Z","updated":"2019-12-05T16:07:43.938Z","comments":true,"path":"2019/12/05/我的第一条博客/","link":"","permalink":"https://newbeenoob.github.io/2019/12/05/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9D%A1%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"最简单的生成器使用 首先从最简单的自定义长度列表说起：在刚开始接触 python 的时候，由于沿袭了 C 的习惯；我会这样写： 1def lystgen(num):2 n = 03 a = []4 while n &lt; num:5 a.append(n)6 n += 1 同样还有面向对象的写法： 1class lystgen:2 def __init__(self,x):3 self.a = x4 self.b = 05 def __iter__(self):6 return self7 def __next__(self):8 while self.b &lt; self.a:9 res = self.b10 self.b += 111 return res12 # 不断调用 next 方法 这种方法 调用 next 函数才会返回值 不会一次返回一个大的列表；我们还可以再改良代码，这就需要使用关键字 yield 了。 下面是一个例程；用 yield 生成一个惰性序列 返回20以内所有奇数： 1def lazy_iter(num):2 n = 13 print(\"getting started\")4 while n &lt; num:5 yield n6 n += 278for item in lazy_iter(20):9 print(item) 任何一个带有yield语句的函数都是一个生成器，当你直接调用这个函数时，内部的代码是不会被执行的，只有调用yield里面的next函数才会去执行代码， 而for循环可以自动去调用这个next函数来输出值。 yield 可以理解成 return ；其功能是可以中断函数，中断后再次调用时继续从上一次中断的位置继续执行代码并返回值。（相当于 yield 在程序中扮演了给运行例程存档后又读档的角色）。 使用 yield 计算斐波那契数列1# 生成器 fib_generator 2def fib_gen():3 p,q = 1,14 while True:5 yield p6 p,q = q,p + q7 8# 根据 num 不断执行 next() 返回对应的斐波那契数字9def fib(num):10 it = fib_gen() # 这里 it 是一个生成器对象 （ generator object ）11 for i in range(num):12 cur = next(it) 13 return cur 生成器对象也是一个可迭代物；所以也可以使用 for 对其进行遍历 for 会自动调用 next() 从而不再需要手动调用。 下面是使用列表生成式 生成一个小于60的斐波那契数列。 1new_it = fib_gen(60)2fib_lyst = [item for item in new_it]","categories":[{"name":"Python","slug":"Python","permalink":"https://newbeenoob.github.io/categories/Python/"},{"name":"漫谈系列","slug":"Python/漫谈系列","permalink":"https://newbeenoob.github.io/categories/Python/%E6%BC%AB%E8%B0%88%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://newbeenoob.github.io/tags/Python/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-12-05T03:35:56.840Z","updated":"2019-12-05T03:35:56.840Z","comments":true,"path":"2019/12/05/hello-world/","link":"","permalink":"https://newbeenoob.github.io/2019/12/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}